{"version":3,"sources":["webpack:///./src/utils.js","webpack:///./src/components/Products.js","webpack:///./src/pages/index.js"],"names":["formatMoney","amount","currency","price","toFixed","Intl","NumberFormat","style","currencyDisplay","format","products","class","length","map","product","node","key","id","title","name","to","url","alt","src","images","childImageSharp","fluid","srcSet","xvariable_pricing","xmin_price","xmax_price","default_price","product_status","status","on_sale","getProductStatus","window","SiteGlobalState","IndexPage","data","bodyClass","bodyId","Products","allProductsJson","edges"],"mappings":"2FAAA,kCAAO,IAAMA,EAAc,SAACC,EAAQC,QAAmB,IAAnBA,MAAS,OACzC,IAAIC,EAASF,EAAQG,QAAQ,GAM7B,OALmB,IAAIC,KAAKC,aAAa,CAAC,SAAU,CAClDC,MAAO,WACPL,SAAUA,EACVM,gBAAiB,WAECC,OAAON,K,0ICYhB,kBAAiB,IAAfO,EAAc,EAAdA,SAOf,OACM,oCACA,wBAAIC,MAAM,8BAAV,YACKD,EAASE,OAAS,GACnB,yBAAKD,MAAM,0BACP,yBAAKA,MAAM,gBACND,EAASG,KAAI,SAAAC,GAAY,IAAD,QAErB,OADAA,EAAUA,EAAQC,KAEd,yBAAKC,IAAKF,EAAQG,GAAIN,MAAM,iDACxB,kBAAC,OAAD,CAAMA,MAAM,oBAAoBO,MAAK,QAAUJ,EAAQK,KAAQC,GAAIN,EAAQO,KAC3E,yBAAKV,MAAM,gCACP,4BAAQA,MAAM,gCACd,yBAAKA,MAAM,iBACP,yBACIW,IAAI,GACJX,MAAM,gCAAgCY,IAAG,UAAET,EAAQU,cAAV,iBAAE,EAAiB,UAAnB,aAAE,EAAqBC,gBAAgBC,MAAMH,IACtFI,OAAM,UAAEb,EAAQU,cAAV,iBAAE,EAAiB,UAAnB,aAAE,EAAqBC,gBAAgBC,MAAMC,YAI/D,yBAAKhB,MAAM,2BACP,yBAAKA,MAAM,iCACX,yBAAKA,MAAM,mCACX,yBAAKA,MAAM,2BAA4BG,EAAQK,MAC/C,yBAAKR,MAAM,4BACNG,EAAQc,kBACF5B,YAAYc,EAAQe,YAD1B,MAC2C7B,YAAYc,EAAQgB,YAD/D,GAEM9B,YAAYc,EAAQiB,eAE3B,yBAAKpB,MAAM,6BAnDnD,SAA0BG,GACtB,IAAIkB,EAUJ,MATuB,WAAnBlB,EAAQmB,OACJnB,EAAQoB,UACRF,EAAiB,WAEK,aAAnBlB,EAAQmB,OACfD,EAAiB,WACS,gBAAnBlB,EAAQmB,SACfD,EAAiB,eAEdA,EAwCqEG,CAAiBrB,gBC/CjGsB,OAAOC,gBAAkBD,OAAOC,iBAAmB,GAuDpCC,UArDG,WAChB,IAAMC,EAAI,OAyCV,OACE,kBAAC,IAAD,CACEC,UAAU,QACVC,OAAO,aAEP,kBAAC,IAAD,CAAKvB,MAAM,SACX,kBAACwB,EAAD,CAAUhC,SAAU6B,EAAKI,gBAAgBC,W","file":"component---src-pages-index-js-fcdcc2311086314c4641.js","sourcesContent":["export const formatMoney = (amount, currency=\"USD\") => {\n    let price = (amount).toFixed(2)\n    let numberFormat = new Intl.NumberFormat([\"en-US\"], {\n      style: \"currency\",\n      currency: currency,\n      currencyDisplay: \"symbol\",\n    })\n    return numberFormat.format(price)\n  }\n","import React from \"react\"\n// import products from '../products';\nimport { Link } from \"gatsby\";\nimport { formatMoney } from \"../utils\";\n\nfunction getProductStatus(product) {\n    let product_status;\n    if (product.status === 'active') {\n        if (product.on_sale) {\n            product_status = 'On Sale';\n        }\n    } else if (product.status === 'sold-out') {\n        product_status = 'Sold out';\n    } else if (product.status === 'coming-soon') {\n        product_status = 'Coming soon';\n    }\n    return product_status;\n}\n\nexport default ({products}) => {\n    // const product_image_constrain_width = 346;\n    // const product_image_constrain_height = 346;\n    // const product_image_constrain_width_large = product_image_constrain_width * 2;\n    // const product_image_constrain_height_large = product_image_constrain_height * 2;\n    // const thumb_constrain_width = 30;\n    // const thumb_constrain_height = 30;\n  return (\n        <>\n        <h1 class=\"page-title visually-hidden\">Products</h1>\n            {products.length > 0 &&\n            <div class=\"product-list-container\">\n                <div class=\"product-list\">\n                    {products.map(product => {\n                        product = product.node;\n                        return (\n                            <div key={product.id} class=\"product-list-thumb crop-to-square under_image\">\n                                <Link class=\"product-list-link\" title={`View ${product.name}`} to={product.url}>\n                                <div class=\"product-list-thumb-container\">\n                                    <figure class=\"product-list-image-container\">\n                                    <div class=\"image-wrapper\">\n                                        <img\n                                            alt=\"\"\n                                            class=\"product-list-image image-wide\" src={product.images?.[0]?.childImageSharp.fluid.src}\n                                            srcSet={product.images?.[0]?.childImageSharp.fluid.srcSet}/>\n                                    </div>\n                                    </figure>\n                                </div>\n                                <div class=\"product-list-thumb-info\">\n                                    <div class=\"product-list-item-background\"></div>\n                                    <div class=\"product-list-thumb-info-headers\">\n                                    <div class=\"product-list-thumb-name\">{ product.name }</div>\n                                    <div class=\"product-list-thumb-price\">\n                                        {product.xvariable_pricing ?\n                                            `${formatMoney(product.xmin_price)} - ${formatMoney(product.xmax_price)}` :\n                                            `${formatMoney(product.default_price)}`\n                                        }\n                                        <div class=\"product-list-thumb-status\">{getProductStatus(product)}</div>\n                                    </div>\n                                    </div>\n                                </div>\n                                </Link>\n                            </div>\n                    )})}\n                </div>\n            </div>\n            }\n        </>\n    )\n\n}\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n// import { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n// import Image from \"../components/image\"\nimport SEO from \"../components/seo\"\nimport Products from \"../components/Products\"\n\nwindow.SiteGlobalState = window.SiteGlobalState || {};\n\nconst IndexPage = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allProductsJson {\n        edges {\n          node {\n            id\n            created_at\n            default_price\n            description\n            name\n            on_sale\n            options {\n              label\n              value\n            }\n            options_label\n            options_value\n            paypal_id\n            position\n            price\n            status\n            url\n            tax\n            xmax_price\n            xmin_price\n            xvariable_pricing\n            images {\n              id\n              size\n              childImageSharp {\n                fluid(maxWidth: 300) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `)\n  \n  return (\n    <Layout\n      bodyClass=\"theme\"\n      bodyId=\"home_page\"\n    >\n      <SEO title=\"Home\" />\n      <Products products={data.allProductsJson.edges} />\n    </Layout>\n  )\n}\n\nexport default IndexPage\n"],"sourceRoot":""}